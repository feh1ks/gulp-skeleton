// Mixins

// Sizes
.size(@thesize) {
    width: @thesize;
    height: @thesize;
}

.size(@width, @height) {
    width: @width;
    height: @height;
}

// Hover Darken / Lighten Effect
.hover-lighten (@bg,@color) {
    background: @bg;
    color: @color;
    transition: all .25s;

    &:hover {
        background: lighten(@bg, 5%);
        color: @color;
    }
}

.hover-darken (@bg,@color) {
    background: @bg;
    color: @color;
    transition: all .25s;

    &:hover {
        background: darken(@bg, 5%);
        color: @color;
    }
}

// Usage
//.btn1 {
//    .hover-lighten(#00897B,#fff);
//}
//
//.btn2 {
//    .hover-darken(#00897B,#fff);
//}

// Before & After Blocks
.before-abs(@width:null, @height:null, @top:null, @right:null, @bottom:null, @left:null) {
    position: relative;

    &:before {
        position: absolute;
        display: block;
        content: "";

        .property(width, @width);
        .property(height, @height);

        .property(top, @top);
        .property(right, @right);
        .property(bottom, @bottom);
        .property(left, @left);

        .property(@property, @value) {

            // "Private" method
            ._getProp(width)  when not (@width = null)  { width: @value }
            ._getProp(height) when not (@height = null) { height: @value }

            ._getProp(top)    when not (@top = null)    { top: @value }
            ._getProp(right)  when not (@right = null)  { right: @value }
            ._getProp(bottom) when not (@bottom = null) { bottom: @value }
            ._getProp(left)   when not (@left = null)   { left: @value }
            ._getProp(@property);

        };
    }
}

.after-abs(@width:null, @height:null, @top:null, @right:null, @bottom:null, @left:null) {
    position: relative;

    &:after {
        position: absolute;
        display: block;
        content: "";

        .property(width, @width);
        .property(height, @height);

        .property(top, @top);
        .property(right, @right);
        .property(bottom, @bottom);
        .property(left, @left);

        .property(@property, @value) {

            // "Private" method
            ._getProp(width)  when not (@width = null)  { width: @value }
            ._getProp(height) when not (@height = null) { height: @value }

            ._getProp(top)    when not (@top = null)    { top: @value }
            ._getProp(right)  when not (@right = null)  { right: @value }
            ._getProp(bottom) when not (@bottom = null) { bottom: @value }
            ._getProp(left)   when not (@left = null)   { left: @value }
            ._getProp(@property);

        };
    }
}

// Usage
// .after-abs(@width:2px, @height:100%, @top:0, @right:0

// Button
.button-variant(@color; @background; @border) {
    color: @color;
    background-color: @background;
    border-color: @border;

    &:hover,
    &:focus,
    &:active,
    &.active,
    .open .dropdown-toggle& {
        color: @color;
        background-color: darken(@background, 10%);
        border-color: darken(@border, 12%);
    }
    &:active,
    &.active,
    .open .dropdown-toggle& {
        background-image: none;
    }
}

// Usage
// .btn-custom {
//     .button-variant(@color:white, @background:yellow, @border:yellow);
// }

// Spacing Between Columns In A Row
.space15 () {
    padding-right: 15px;
    > [class*=col] { padding-right: 0 }
}

// Usage
//.row {
//    .space15;
//}
